#!/usr/bin/python

import json
import re
import sys

def usage(warning):
	print >> sys.stderr, "Usage: cjconf-set [-i] [ -f conf_file ] [ INDEXES ] [ name ] value"
	if warning:
		print >> sys.stderr, warning
	quit(1)

confpath = "/etc/cjdroute.conf"
insert = False
if "-f" in sys.argv:
	f = sys.argv.index("-f")
	if f+1 < len(sys.argv):
		confpath = sys.argv[f+1]
		del sys.argv[f+1]
		del sys.argv[f]
	else:
		usage("-f option must give a filename")
if "-i" in sys.argv:
	sys.argv.remove("-i")
	insert = True

def load_conf(confpath):
	try:
		f = open(confpath)
	except:
		usage(str(confpath)+" does not exist, run cjconf-make first")

	raw = f.read()
	del f
	# Filter out comments
	raw = re.sub("(\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+)|(//.*)", "", raw)
	raw = re.sub("//[^\n]*", "", raw)

	# Convert to Python obj
	try:
		config = json.loads(raw, strict=False)
	except:
		usage(str(confpath)+" does not contain valid JSON.")
	return config

def save(obj):
	with open(confpath, 'w') as f:
		json.dump(obj, f, indent=4)

config = {}

if len(sys.argv) < 2:
	usage("Not enough arguments.")
if len(sys.argv) == 2:
	chain = []
	name  = "stuff"
	value = sys.argv[-1]
else:
	config = load_conf(confpath)
	chain = sys.argv[1:-2]
	name  = sys.argv[-2]
	value = sys.argv[-1]

if value == "-":
	value = sys.stdin.read().strip()

try:
	value = json.loads(value)
except:
	try:
		value=int(value)
	except:
		value = sys.argv[-1]

resolved = config
for i in chain:
	if type(resolved) ==list:
		i = int(i)
	resolved = resolved[i]

if type(resolved) ==list:
	name = int(name)

if insert:
	if value == "==del":
		usage("Cannot use ==del when inserting")
	else:
		if type(resolved) == list:
			resolved.insert(name, value)
		else:
			resolved[name] = value
else:
	if value == "==del":
		del resolved[name]
	else:
		resolved[name] = value

if len(sys.argv) ==2:
	config = config['stuff']
	resolved = config

if len(chain) > 0:
	print " >> ".join(chain)
else:
	print "(Top Level)"
print json.dumps(resolved, indent=4)
save(config)
