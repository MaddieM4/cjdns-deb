#!/usr/bin/python

import json
import re
import sys

def usage(warning):
	print >> sys.stderr, "Usage: cjconf-get [-n] [ -f conf_file ] [ INDEXES ]"
	if warning:
		print >> sys.stderr, warning
	quit(1)

confpath = "/etc/cjdroute.conf"
only_names = False
if "-f" in sys.argv:
	f = sys.argv.index("-f")
	if f+1 < len(sys.argv):
		confpath = sys.argv[f+1]
		del sys.argv[f+1]
		del sys.argv[f]
	else:
		usage("-f option must give a filename")

if "-n" in sys.argv:
	sys.argv.remove("-n")
	only_names = True

def load_conf(confpath):
	try:
		f = open(confpath)
	except:
		usage(str(confpath)+"does not exist, run cjconf-make first")

	raw = f.read()
	del f
	# Filter out comments
	raw = re.sub("(\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+)|(//.*)", "", raw)
	raw = re.sub("//[^\n]*", "", raw)

	# Convert to Python obj
	try:
		config = json.loads(raw, strict=False)
	except:
		usage(str(confpath)+"does not contain valid JSON.")
	return config

config = load_conf(confpath)

chain = sys.argv[1:]
resolved = config
for i in chain:
	if type(resolved) ==list:
		i = int(i)
	resolved = resolved[i]
if type(resolved) in (str, int, unicode):
	print resolved
else:
	if only_names:
		if type(resolved)==list:
			print "[ Array of length "+str(len(resolved))+"]"
		else:
			for x in resolved:
				print x
	else:
		print json.dumps(resolved, indent=4)
