'\" t
.\"     Title: cjconf-set
.\"    Author: [see the "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 03/02/2012
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "CJCONF\-SET" "1" "03/02/2012" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
cjconf-set \- modifies the JSON of a config file\&.
.SH "SYNOPSIS"
.sp
\fBcjconf\-set\fR [\-i] [ \-f conf_file ] [ INDEXES ] [ name ] value
.SH "DESCRIPTION"
.sp
cjconf\-set(1) is a lot like cjconf\-get(1), except it allows you set values in the JSON structure\&. Until the last one, each argument takes you a layer deeper into the heirarchy structure, with the last value as a payload\&.
.sp
It does not recursively create structure where none exists\&. For example, trying to set config["a"]["b"]["c"] will succeed if both "a" and "b" exist, and fail otherwise\&. To create deeper structures, the easiest and cleanest way is to use multiple commands, for example,
.sp
.if n \{\
.RS 4
.\}
.nf
cjconf\-set a {}
cjconf\-set a b {}
cjconf\-set a b c "Success!"
.fi
.if n \{\
.RE
.\}
.SH "EXAMPLES"
.PP
\fBcjconf\-set\fR ["hello"]
.RS 4
When the name argument is omitted, you set the JSON contents of the entire file\&. In this case, the file will contain only ["hello"] as a root node\&. You can use this sort of thing for general\-purpose JSON editing but it\(cqs really impractical (and a bit dangerous) to use for actual cjdroute configs\&.
.RE
.PP
\fBcjconf\-set\fR version 2 \-f myconf
.RS 4
Sets config["version"] to 2\&. Does not recursively descend at all\&. The edit affects the file in location "myconf" instead of the default, /etc/cjdroute\&.conf\&.
.RE
.PP
\fBcjconf\-set\fR router interface tunDevice vwlan1
.RS 4
Sets config["router"]["interface"]["tunDevice"] to "vwlan1" instead of the default, "tun0"\&.
.RE
.PP
\fBcjconf\-set\fR security 0 ==del
.RS 4
This shows off two interesting syntax things\&. One, you can use ints as indexes for arrays, like config["security"] is\&. The other thing is that if you pass "==del" as the value, it will delete that thing\&. This command is equivalent to
\fIdel config["security"][0]\fR\&.
.RE
.PP
\fBcjconf\-set\fR \-i security 0 nofiles
.RS 4
The \-i option stands for insert\&. Normally when working with arrays, you overwrite existing values\&. Insert means, stick the value in there such that its index is (the given index)\&. This command undoes the results of the previous command, by sticking the string "nofiles" at the beginning of config["security"]\&. Using ==del with the insert option will cause an error\&. The insert option has no effect on JSON mappings (the things in {} braces), it just works like normal\&.
.RE
.SH "BUGS"
.sp
See https://github\&.com/campadrenalin/cjdns\-deb/issues
.SH "AUTHOR"
.sp
cjconf\-set was written by Philip Horger in 2012\&. cjdroute was written by Caleb Delisle\&.
.SH "RESOURCES"
.sp
Github: https://github\&.com/campadrenalin/cjdns\-deb/
.SH "COPYING"
.sp
Copyright (C) 2012 Philip Horger\&. Free use of this software is granted under the terms of the GNU General Public License (GPL)\&.
